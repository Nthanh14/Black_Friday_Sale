# -*- coding: utf-8 -*-
"""black_friday_sale

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EvkUDOJ0Vxyq45_xTgR0Je9FHDxztofo
"""

from google.colab import files
uploaded = files.upload()

# ĐỌC DỮ LIỆU
import pandas as pd
df = pd.read_csv('/content/Black_Friday_Sale.csv')
#check data
print("\nData information:")
print(df.info())
print("\nData Description:")
print(df.describe())

from google.colab import drive
drive.mount('/content/drive')

#Step 2.1 xoá null và trùng lặp
print("\n STEP 2.1 – Handling missing and duplicate values" )

print("Number of records after handling nulls:", df.shape[0])
# Remove duplicates
df = df.drop_duplicates()
print("Number of records after removing duplicates:", df.shape[0])

#Step 2.2
print("\nSTEP 2.2 - Remove Outliers")
# Calculate IQR for Purchase
Q1 = df['Purchase'].quantile(0.25)
Q3 = df['Purchase'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
print("IQR Bounds for Purchase: Lower =", lower_bound, ", Upper =", upper_bound)

# Count outliers
outliers = df[(df['Purchase'] < lower_bound) | (df['Purchase'] > upper_bound)].shape[0]

# Remove outliers
initial_rows = df.shape[0]
df = df[(df['Purchase'] >= lower_bound) & (df['Purchase'] <= upper_bound)]
print("Records before outlier removal:", initial_rows)
print("Records after outlier removal:", df.shape[0])

#STEP 2.3 – Handle dates and create a new column
print("\n STEP 2.3 – Handle dates and create a new column" )
df['Purchase_Date'] = pd.date_range(start='2023-11-01', periods=len(df), freq='min')
df['Purchase_Weekday'] = df['Purchase_Date'].dt.day_name()
df['Is_Weekend'] = df['Purchase_Weekday'].isin(['Saturday', 'Sunday']).astype(int)
print("Columns created 'Purchase_Date', 'Purchase_Weekday', 'Is_Weekend'.")
# THÊM DÒNG NÀY ĐỂ HIỂN THỊ KẾT QUẢ
print("\nCheck the top 5 rows of the new date columns:")
print(df[['Purchase_Date', 'Purchase_Weekday', 'Is_Weekend']].head())

from sklearn.preprocessing import LabelEncoder, StandardScaler
print("\nSTEP 2.4 - Standardize Data")
print("Number of records before standardization:", df.shape[0])

# Encode categorical variables
categorical_cols = ['Gender', 'Age', 'City_Category', 'Stay_In_Current_City_Years']
for col in categorical_cols:
    if col in df.columns:
        df[col] = LabelEncoder().fit_transform(df[col].astype(str))
    else:
        print(f"Warning: Column {col} not found, skipping encoding.")
print("\nEncoded categorical data (first 5 rows):")
print(df[categorical_cols].head())

# Standardize numerical features
numerical_cols = ['Purchase', 'Product_Category_1', 'Product_Category_2', 'Product_Category_3']
for col in numerical_cols:
    if col in df.columns:
        df[col] = pd.to_numeric(df[col], errors='coerce')  # Convert to numeric
        df[col] = df[col].fillna(df[col].mean())  # Fill NaN with mean
scaler = StandardScaler()
df[numerical_cols] = scaler.fit_transform(df[numerical_cols].fillna(0))  # Standardize
print("\nStandardized numerical data (first 5 rows):")
print(df[numerical_cols].head())

# Verify standardization
print("\nNumber of records after standardization:", df.shape[0])

# 3.1 - Thống kê cơ bản của Purchase theo các nhóm
print("\n3.1 - Thống kê cơ bản của Purchase theo các nhóm:")
# Theo Gender
gender_stats = df.groupby('Gender')['Purchase'].agg(['mean', 'median', 'std']).round(4)
print("\nThống kê Purchase theo Gender (0 = F, 1 = M):")
print(gender_stats)


# Theo City_Category
city_stats = df.groupby('City_Category')['Purchase'].agg(['mean', 'median', 'std']).round(4)
print("\nThống kê Purchase theo City_Category (đã mã hóa):")
print(city_stats)

import matplotlib.pyplot as plt
gender_means = df.groupby('Gender')['Purchase'].mean().reset_index()
plt.figure(figsize=(8, 6))
plt.bar(gender_means['Gender'], gender_means['Purchase'], color=['pink', 'blue'])
plt.title('Average Purchase by Gender (Standardized)')
plt.xlabel('Gender (0 = Female, 1 = Male)')
plt.ylabel('Average Purchase (Normalized Value)')
plt.xticks(gender_means['Gender'], ['Female', 'Male'])
plt.grid(axis='y', linestyle='--', alpha=0.7)
for i, v in enumerate(gender_means['Purchase']):
    plt.text(i, v + 0.01, f'{v:.2f}', ha='center')
plt.show()
print("\nData used to draw the chart:")
print(gender_means)

gender_counts = df['Gender'].value_counts().reset_index()
gender_counts.columns = ['Gender', 'Count']
plt.figure(figsize=(8, 6))
plt.pie(gender_counts['Count'], labels=['Female', 'Male'], colors=['pink', 'blue'], autopct='%1.1f%%', startangle=90)
plt.title('Distribution of customer numbers by Gender')
plt.axis('equal')  # Đảm bảo hình tròn
plt.show()
print("\nData used to draw pie chart:")
print(gender_counts)

age_means = df.groupby('Age')['Purchase'].mean().reset_index()
plt.figure(figsize=(10, 6))
plt.plot(age_means['Age'], age_means['Purchase'], marker='o', color='green', linestyle='-', linewidth=2, markersize=8)
plt.title('Average Purchase Trend by Age (Normalized)')
plt.xlabel('Age (Normalized)')
plt.ylabel('Average Purchase (Normalized Value)')
plt.grid(True)
plt.xticks(age_means['Age'])
for i, v in enumerate(age_means['Purchase']):
    plt.text(age_means['Age'][i], v + 0.01, f'{v:.2f}', ha='center')
plt.show()
print("\nData used to draw line graph:")
print(age_means)

data = {'Purchase': np.random.randint(0, 20000, 1000)}
df = pd.DataFrame(data)
purchase_column_exists = 'Purchase' in df.columns if 'df' in locals() else False
if purchase_column_exists:
    plt.figure(figsize=(10, 6))
    plt.hist(df['Purchase'], bins=30, color='green', edgecolor='black')
    plt.title('Frequency Distribution of Purchase')
    plt.xlabel('Purchase (Value)')
    plt.ylabel('Frequency')
    plt.grid(True)
    plt.show()
    try:
        purchase_min = df['Purchase'].min()
        purchase_max = df['Purchase'].max()
        print("\nData used to draw the frequency chart:")
        print("Number of bins:", 30)
        print(f"Purchase Value Range: {purchase_min:.2f} arrive {purchase_max:.2f}")
    except Exception as e:
        print("\nError calculating min/max of Purchase:", e)
        print("Range cannot be determined due to invalid data.")
else:
    print("Error: 'Purchase' column not found or dataframe 'df' is not defined. Histogram skipped.")

if 'Purchase' in df.columns and 'Gender' in df.columns:
    plt.figure(figsize=(10, 6))
    df.boxplot(column='Purchase', by='Gender', grid=True)
    plt.title('Purchase Distribution by Gender')
    plt.suptitle('')
    plt.xlabel('Gender (0 = Female, 1 = Male)')
    plt.ylabel('Purchase')
    plt.xticks([1, 2], ['Female', 'Male'])
    plt.grid(True)
    plt.show()
    print("\nData used to draw box plot:")
    print(df.groupby('Gender')['Purchase'].describe())
else:
    print("Error: 'Purchase' or 'Gender' column not found. Box plot cannot be created.")
